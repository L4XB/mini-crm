basePath: /api/v1
definitions:
  controllers.AuthResponseSwagger:
    description: AuthResponse-Objekt für die API-Dokumentation
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserSwagger'
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.User:
    type: object
  models.UserSwagger:
    description: User-Objekt für die API-Dokumentation
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@example.com
    name: API Support
  description: API for Mini CRM System
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Mini CRM API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authentifiziert einen Nutzer und gibt ein JWT zurück
      parameters:
      - description: Login-Daten
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AuthResponseSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Loggt den Nutzer aus (Client muss das Token löschen)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Auth
  /auth/me:
    get:
      description: Gibt die Daten des eingeloggten Nutzers zurück
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Eigenes Profil abrufen
      tags:
      - Auth
  /auth/refresh:
    post:
      description: Gibt ein neues JWT für den eingeloggten Nutzer aus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Token erneuern
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registriert einen neuen Nutzer
      parameters:
      - description: Registrierungsdaten
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AuthResponseSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Registrierung
      tags:
      - Auth
  /users:
    get:
      description: Gibt alle Nutzer (Admin) oder nur den eigenen Account (User) zurück
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserSwagger'
            type: array
      security:
      - BearerAuth: []
      summary: Nutzer auflisten
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Legt einen neuen Nutzer an (nur Admin)
      parameters:
      - description: Nutzer-Daten
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer anlegen
      tags:
      - User
  /users/{id}:
    delete:
      description: Löscht einen Nutzer und alle zugehörigen Daten (nur Admin)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer löschen
      tags:
      - User
    get:
      description: Gibt einen bestimmten Nutzer anhand der ID zurück (User nur sich
        selbst, Admin alle)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer abrufen
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Aktualisiert einen Nutzer (User nur sich selbst, Admin alle)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Nutzer-Daten
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer aktualisieren
      tags:
      - User
  /users/me:
    delete:
      description: Löscht den eigenen Account und alle zugehörigen Daten
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Eigenen Account löschen
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    description: API key for mobile applications
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    description: Enter the token with the `Bearer ` prefix, e.g. "Bearer abcde12345".
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
