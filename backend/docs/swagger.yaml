basePath: /api/v1
definitions:
  controllers.AuthResponseSwagger:
    description: AuthResponse-Objekt für die API-Dokumentation
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserSwagger'
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Contact:
    type: object
  models.ContactSwagger:
    description: Contact-Objekt für die API-Dokumentation
    properties:
      company:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Deal:
    type: object
  models.DealSwagger:
    description: Deal-Objekt für die API-Dokumentation
    properties:
      contact_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      value:
        type: number
    type: object
  models.Note:
    type: object
  models.NoteSwagger:
    description: Note-Objekt für die API-Dokumentation
    properties:
      contact_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      deal_id:
        type: integer
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Settings:
    type: object
  models.SettingsSwagger:
    description: Settings-Objekt für die API-Dokumentation
    properties:
      id:
        type: integer
      language:
        type: string
      theme:
        type: string
      user_id:
        type: integer
    type: object
  models.Task:
    type: object
  models.TaskSwagger:
    description: Task-Objekt für die API-Dokumentation
    properties:
      created_at:
        type: string
      deal_id:
        type: integer
      done:
        type: boolean
      due_date:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    type: object
  models.UserSwagger:
    description: User-Objekt für die API-Dokumentation
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  utils.APIErrorResponse:
    description: Fehlerstruktur für API-Fehler
    properties:
      error:
        description: Fehlernachricht
        example: Etwas ist schiefgelaufen
        type: string
      success:
        description: Erfolg der Anfrage (immer false bei Fehler)
        example: false
        type: boolean
    type: object
  utils.APISuccessResponse:
    description: Erfolgsstruktur für API-Antworten
    properties:
      message:
        description: Nachricht
        example: Aktion erfolgreich
        type: string
      success:
        description: Erfolg der Anfrage (immer true bei Erfolg)
        example: true
        type: boolean
    type: object
host: localhost:8081
info:
  contact:
    email: support@example.com
    name: API Support
  description: API for Mini CRM System
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Mini CRM API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authentifiziert einen Nutzer und gibt ein JWT zurück
      parameters:
      - description: Login-Daten
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AuthResponseSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Loggt den Nutzer aus (Client muss das Token löschen)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Auth
  /auth/me:
    get:
      description: Gibt die Daten des eingeloggten Nutzers zurück
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Eigenes Profil abrufen
      tags:
      - Auth
  /auth/refresh:
    post:
      description: Gibt ein neues JWT für den eingeloggten Nutzer aus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Token erneuern
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registriert einen neuen Nutzer
      parameters:
      - description: Registrierungsdaten
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AuthResponseSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Registrierung
      tags:
      - Auth
  /contacts:
    get:
      consumes:
      - application/json
      description: Listet alle Kontakte für den angemeldeten User oder Admin auf
      parameters:
      - description: User-ID (nur für Admins)
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContactSwagger'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Kontakte auflisten
      tags:
      - contacts
    post:
      consumes:
      - application/json
      description: Lege einen neuen Kontakt für den authentifizierten User an
      parameters:
      - description: Kontaktdaten
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/models.Contact'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ContactSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Kontakt anlegen
      tags:
      - contacts
  /contacts/{id}:
    delete:
      consumes:
      - application/json
      description: Löscht einen Kontakt und alle zugehörigen Daten
      parameters:
      - description: Kontakt-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APISuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Kontakt löschen
      tags:
      - contacts
    get:
      consumes:
      - application/json
      description: Gibt einen Kontakt anhand seiner ID zurück
      parameters:
      - description: Kontakt-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ContactSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Kontakt abrufen
      tags:
      - contacts
    put:
      consumes:
      - application/json
      description: Aktualisiert die Daten eines bestehenden Kontakts
      parameters:
      - description: Kontakt-ID
        in: path
        name: id
        required: true
        type: integer
      - description: Kontaktdaten
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/models.Contact'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ContactSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Kontakt aktualisieren
      tags:
      - contacts
  /deals:
    get:
      consumes:
      - application/json
      description: Listet alle Deals für den angemeldeten User oder Admin auf
      parameters:
      - description: User-ID (nur für Admins)
        in: query
        name: user_id
        type: integer
      - description: Contact-ID
        in: query
        name: contact_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DealSwagger'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Deals auflisten
      tags:
      - deals
    post:
      consumes:
      - application/json
      description: Lege einen neuen Deal für den authentifizierten User an
      parameters:
      - description: Deal-Daten
        in: body
        name: deal
        required: true
        schema:
          $ref: '#/definitions/models.Deal'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DealSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Deal anlegen
      tags:
      - deals
  /deals/{id}:
    delete:
      consumes:
      - application/json
      description: Löscht einen Deal und alle zugehörigen Daten
      parameters:
      - description: Deal-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APISuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Deal löschen
      tags:
      - deals
    get:
      consumes:
      - application/json
      description: Gibt einen Deal anhand seiner ID zurück
      parameters:
      - description: Deal-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DealSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Deal abrufen
      tags:
      - deals
    put:
      consumes:
      - application/json
      description: Aktualisiert die Daten eines bestehenden Deals
      parameters:
      - description: Deal-ID
        in: path
        name: id
        required: true
        type: integer
      - description: Deal-Daten
        in: body
        name: deal
        required: true
        schema:
          $ref: '#/definitions/models.Deal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DealSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Deal aktualisieren
      tags:
      - deals
  /notes:
    get:
      consumes:
      - application/json
      description: Listet alle Notizen für den angemeldeten User oder Admin auf
      parameters:
      - description: User-ID (nur für Admins)
        in: query
        name: user_id
        type: integer
      - description: Contact-ID
        in: query
        name: contact_id
        type: integer
      - description: Deal-ID
        in: query
        name: deal_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NoteSwagger'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Notizen auflisten
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: Lege eine neue Notiz für den authentifizierten User an
      parameters:
      - description: Notiz-Daten
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.Note'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NoteSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Notiz anlegen
      tags:
      - notes
  /notes/{id}:
    delete:
      consumes:
      - application/json
      description: Löscht eine Notiz
      parameters:
      - description: Notiz-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APISuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Notiz löschen
      tags:
      - notes
    get:
      consumes:
      - application/json
      description: Gibt eine Notiz anhand ihrer ID zurück
      parameters:
      - description: Notiz-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Notiz abrufen
      tags:
      - notes
    put:
      consumes:
      - application/json
      description: Aktualisiert die Daten einer bestehenden Notiz
      parameters:
      - description: Notiz-ID
        in: path
        name: id
        required: true
        type: integer
      - description: Notiz-Daten
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.Note'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Notiz aktualisieren
      tags:
      - notes
  /settings/{id}:
    get:
      consumes:
      - application/json
      description: Gibt die Einstellungen eines Users anhand der User-ID zurück
      parameters:
      - description: User-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SettingsSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Einstellungen abrufen
      tags:
      - settings
    put:
      consumes:
      - application/json
      description: Aktualisiert die Einstellungen eines Users anhand der User-ID
      parameters:
      - description: User-ID
        in: path
        name: id
        required: true
        type: integer
      - description: Einstellungen
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SettingsSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Einstellungen aktualisieren
      tags:
      - settings
  /tasks:
    get:
      consumes:
      - application/json
      description: Listet alle Aufgaben für den angemeldeten User oder Admin auf
      parameters:
      - description: User-ID (nur für Admins)
        in: query
        name: user_id
        type: integer
      - description: Deal-ID
        in: query
        name: deal_id
        type: integer
      - description: Abgeschlossen?
        in: query
        name: completed
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TaskSwagger'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Aufgaben auflisten
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Lege eine neue Aufgabe für den authentifizierten User an
      parameters:
      - description: Aufgaben-Daten
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TaskSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Aufgabe anlegen
      tags:
      - tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Löscht eine Aufgabe
      parameters:
      - description: Aufgaben-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APISuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Aufgabe löschen
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Gibt eine Aufgabe anhand ihrer ID zurück
      parameters:
      - description: Aufgaben-ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Aufgabe abrufen
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Aktualisiert die Daten einer bestehenden Aufgabe
      parameters:
      - description: Aufgaben-ID
        in: path
        name: id
        required: true
        type: integer
      - description: Aufgaben-Daten
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Aufgabe aktualisieren
      tags:
      - tasks
  /users:
    get:
      description: Gibt alle Nutzer (Admin) oder nur den eigenen Account (User) zurück
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserSwagger'
            type: array
      security:
      - BearerAuth: []
      summary: Nutzer auflisten
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Legt einen neuen Nutzer an (nur Admin)
      parameters:
      - description: Nutzer-Daten
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer anlegen
      tags:
      - User
  /users/{id}:
    delete:
      description: Löscht einen Nutzer und alle zugehörigen Daten (nur Admin)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer löschen
      tags:
      - User
    get:
      description: Gibt einen bestimmten Nutzer anhand der ID zurück (User nur sich
        selbst, Admin alle)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer abrufen
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Aktualisiert einen Nutzer (User nur sich selbst, Admin alle)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Nutzer-Daten
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Nutzer aktualisieren
      tags:
      - User
  /users/me:
    delete:
      description: Löscht den eigenen Account und alle zugehörigen Daten
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Eigenen Account löschen
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    description: API key for mobile applications
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    description: Enter the token with the `Bearer ` prefix, e.g. "Bearer abcde12345".
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
