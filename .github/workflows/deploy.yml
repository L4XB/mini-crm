name: Build and Deploy Mini CRM

# Workflow manuell ausl√∂sen, nicht bei jedem Push
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment-Umgebung'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deploy:
        description: 'Deploy nach Build?'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.18'

    - name: Install dependencies
      run: |
        cd backend
        go mod download

    - name: Test
      run: |
        cd backend
        go test -v ./...

    - name: Build
      run: |
        cd backend
        go build -v -o mini-crm-api ./cmd/main.go

    - name: Build Docker images
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker build -t mini-crm-api ./backend
        
    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Push Docker images
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Taggen und Pushen des Backend-Images
        docker tag mini-crm-api ${{ secrets.DOCKER_USERNAME }}/mini-crm-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mini-crm-api:latest
        
  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /opt/mini-crm
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker image prune -af
